local miedziany_p = require "miedziany.palette"
local p = miedziany_p.p

local h = vim.api.nvim_set_hl

local Theme = {}

Theme.load = function()
  h(0, "Normal", { fg = p.fg, bg = p.bg })
  h(0, "SignColumn", { fg = 'NONE', bg = p.bg })
  h(0, "MsgArea", { fg = p.fg, bg = p.bg })
  h(0, "ModeMsg", { fg = p.fg, bg = p.dark })
  h(0, "MsgSeparator", { fg = p.fg, bg = p.bg })
  h(0, "SpellBad", { fg = p.light_red, bg = 'NONE', underline = true, })
  h(0, "SpellCap", { fg = p.yellow, bg = 'NONE', underline = true, })
  h(0, "SpellLocal", { fg = p.green, bg = 'NONE', underline = true, })
  h(0, "SpellRare", { fg = p.royal, bg = 'NONE', underline = true, })
  h(0, "NormalNC", { fg = p.fg, bg = p.bg })
  h(0, "Pmenu", { fg = p.light_gray, bg = p.tree_gray, sp = 'NONE', blend = 50, })
  h(0, "PmenuSel", { fg = 'NONE', bg = p.ui2_blue })
  h(0, "WildMenu", { fg = p.fg, bg = p.ui2_blue })
  h(0, "CursorLineNr", { fg = p.red, bg = 'NONE', bold = true, })
  h(0, "Comment", { fg = p.dark_gray, bg = 'NONE', italic = true, })
  h(0, "Folded", { fg = p.accent, bg = p.alt_bg })
  h(0, "FoldColumn", { fg = p.accent, bg = p.alt_bg })
  h(0, "LineNr", { fg = p.darkred, bg = 'NONE' })
  h(0, "FloatBorder", { fg = p.white, bg = p.alt_bg })
  h(0, "Whitespace", { fg = p.bg, bg = 'NONE' })
  h(0, "VertSplit", { fg = p.white, bg = p.bg })
  h(0, "CursorLine", { fg = 'NONE', bg = p.dark })
  h(0, "CursorColumn", { fg = 'NONE', bg = p.dark })
  h(0, "ColorColumn", { fg = 'NONE', bg = p.dark })
  h(0, "NormalFloat", { fg = 'NONE', bg = p.dark })
  h(0, "Visual", { fg = 'NONE', bg = p.line })
  h(0, "VisualNOS", { fg = 'NONE', bg = p.alt_bg })
  h(0, "WarningMsg", { fg = p.error_red, bg = p.bg })
  h(0, "DiffAdd", { fg = p.alt_bg, bg = p.sign_add })
  h(0, "DiffChange", { fg = p.alt_bg, bg = p.sign_change, underline = true, })
  h(0, "DiffDelete", { fg = p.alt_bg, bg = p.sign_delete })
  h(0, "QuickFixLine", { fg = 'NONE', bg = p.ui2_blue })
  h(0, "PmenuSbar", { fg = 'NONE', bg = p.alt_bg })
  h(0, "PmenuThumb", { fg = p.black, bg = p.white })
  h(0, "MatchWord", { fg = 'NONE', bg = 'NONE', underline = true, })
  h(0, "MatchParen", { fg = p.white, bg = p.neongreen, })
  h(0, "MatchWordCur", { fg = p.black, bg = p.white, underline = true, })
  h(0, "MatchParenCur", { fg = p.white, bg = p.black, })
  h(0, "Cursor", { fg = p.cursor_fg, bg = p.cursor_bg })
  h(0, "lCursor", { fg = p.cursor_fg, bg = p.cursor_bg })
  h(0, "CursorIM", { fg = p.cursor_fg, bg = p.cursor_bg })
  h(0, "TermCursor", { fg = p.cursor_fg, bg = p.cursor_bg })
  h(0, "TermCursorNC", { fg = p.cursor_fg, bg = p.cursor_bg })
  h(0, "Conceal", { fg = p.accent, bg = 'NONE' })
  h(0, "Directory", { fg = p.light_purple, bg = 'NONE' })
  h(0, "SpecialKey", { fg = p.cyan, bg = 'NONE', bold = true, })
  h(0, "Title", { fg = p.cyan, bg = 'NONE', bold = true, })
  h(0, "ErrorMsg", { fg = p.error_red, bg = p.bg, bold = true, })
  h(0, "Search", { fg = p.neongreen, bg = p.black })
  h(0, "IncSearch", { fg = p.star_green, bg = p.bg })
  h(0, "Substitute", { fg = p.black, bg = p.neongreen })
  h(0, "MoreMsg", { fg = p.orange, bg = 'NONE' })
  h(0, "Question", { fg = p.orange, bg = 'NONE' })
  h(0, "EndOfBuffer", { fg = p.bg, bg = 'NONE' })
  h(0, "NonText", { fg = p.bg, bg = 'NONE' })
  h(0, "Variable", { fg = p.altred, bg = 'NONE' })
  h(0, "@variable", { fg = p.altred, bg = 'NONE' })
  h(0, "String", { fg = p.light_red, bg = 'NONE' })
  h(0, "Character", { fg = p.orange, bg = 'NONE' })
  h(0, "Constant", { fg = p.royal, bg = 'NONE' })
  h(0, "Number", { fg = p.fg, bg = 'NONE' })
  h(0, "Boolean", { fg = p.cyan, bg = 'NONE' })
  h(0, "Float", { fg = p.fg, bg = 'NONE' })
  h(0, "Identifier", { fg = p.magenta, bg = 'NONE' })
  h(0, "Function", { fg = p.yellow, bg = 'NONE' })
  h(0, "Operator", { fg = p.fg, bg = 'NONE' })
  h(0, "Type", { fg = p.rose, bg = 'NONE' })
  h(0, "StorageClass", { fg = p.cyan, bg = 'NONE' })
  h(0, "Structure", { fg = p.cyan, bg = 'NONE' })
  h(0, "Typedef", { fg = p.rose, bg = 'NONE' })
  h(0, "Keyword", { fg = p.cyan, bg = 'NONE' })
  h(0, "Statement", { fg = p.royal, bg = 'NONE' })
  h(0, "Conditional", { fg = p.cyan, bg = 'NONE' })
  h(0, "Repeat", { fg = p.royal, bg = 'NONE' })
  h(0, "Label", { fg = p.royal, bg = 'NONE' })
  h(0, "Exception", { fg = p.royal, bg = 'NONE' })
  h(0, "Include", { fg = p.royal, bg = 'NONE' })
  h(0, "PreProc", { fg = p.royal, bg = 'NONE' })
  h(0, "Define", { fg = p.royal, bg = 'NONE' })
  h(0, "Macro", { fg = p.orange, bg = 'NONE' })
  h(0, "PreCondit", { fg = p.royal, bg = 'NONE' })
  h(0, "Special", { fg = p.seafoam, bg = 'NONE' })
  h(0, "SpecialChar", { fg = p.white, bg = 'NONE' })
  h(0, "Tag", { fg = p.cyan, bg = 'NONE' })
  h(0, "Debug", { fg = p.red, bg = 'NONE' })
  h(0, "Delimiter", { fg = p.white, bg = 'NONE' })
  h(0, "SpecialComment", { fg = p.white, bg = 'NONE' })
  h(0, "Underlined", { fg = 'NONE', bg = 'NONE', underline = true, })
  h(0, "Bold", { fg = 'NONE', bg = 'NONE', bold = true, })
  h(0, "Italic", { fg = 'NONE', bg = 'NONE', italic = true, })
  h(0, "Ignore", { fg = p.cyan, bg = p.bg, bold = true, })
  h(0, "Todo", { fg = p.light_orange, bg = p.bg, bold = true, })
  h(0, "Error", { fg = p.error_red, bg = p.bg, bold = true, })
  h(0, "TabLine", { fg = p.light_gray, bg = p.line })
  h(0, "TabLineSel", { fg = p.white, bg = p.line })
  h(0, "TabLineFill", { fg = p.line, bg = p.line })

  -- Treesitter
  h(0, "TSComment", { link = 'Comment' })
  h(0, "TSAnnotation", { fg = p.cyan, bg = 'NONE' })
  h(0, "TSAttribute", { fg = p.cyan, bg = 'NONE' })
  h(0, "TSConstructor", { fg = p.cyan, bg = 'NONE' })
  h(0, "TSType", { fg = p.cyan, bg = 'NONE' })
  h(0, "TSTypeBuiltin", { fg = p.orange, bg = 'NONE' })
  h(0, "TSConditional", { fg = p.yellow, bg = 'NONE' })
  h(0, "TSException", { fg = p.royal, bg = 'NONE' })
  h(0, "TSInclude", { fg = p.royal, bg = 'NONE' })
  h(0, "TSKeywordReturn", { fg = p.magenta, bg = 'NONE' })
  h(0, "TSKeyword", { fg = p.royal, bg = 'NONE' })
  h(0, "TSKeywordFunction", { fg = p.yellow, bg = 'NONE' })
  h(0, "TSLabel", { fg = p.light_red, bg = 'NONE' })
  h(0, "TSNamespace", { fg = p.cyan, bg = 'NONE' })
  h(0, "TSRepeat", { fg = p.yellow, bg = 'NONE' })
  h(0, "TSConstant", { fg = p.royal, bg = 'NONE' })
  h(0, "TSConstBuiltin", { fg = p.royal, bg = 'NONE' })
  h(0, "TSFloat", { fg = p.fg, bg = 'NONE' })
  h(0, "TSNumber", { fg = p.fg, bg = 'NONE' })
  h(0, "TSBoolean", { fg = p.magenta, bg = 'NONE' })
  h(0, "TSCharacter", { fg = p.green, bg = 'NONE' })
  h(0, "TSError", { fg = p.error_red, bg = 'NONE' })
  h(0, "TSFunction", { fg = p.yellow, bg = 'NONE' })
  h(0, "TSFuncBuiltin", { fg = p.light_red, bg = 'NONE' })
  h(0, "TSMethod", { fg = p.orange, bg = 'NONE' })
  h(0, "TSConstMacro", { fg = p.orange, bg = 'NONE' })
  h(0, "TSFuncMacro", { fg = p.cyan, bg = 'NONE' })
  h(0, "TSVariable", { fg = p.red, bg = 'NONE' })
  h(0, "TSVariableBuiltin", { fg = p.red, bg = 'NONE' })
  h(0, "TSProperty", { fg = p.magenta, bg = 'NONE' })
  h(0, "TSName", { fg = p.red, bg = 'NONE' })
  h(0, "TSField", { fg = p.fg, bg = 'NONE' })
  h(0, "TSParameter", { fg = p.red, bg = 'NONE' })
  h(0, "TSParameterReference", { fg = p.red, bg = 'NONE' })
  h(0, "TSSymbol", { fg = p.light_red, bg = 'NONE' })
  h(0, "TSText", { fg = p.alt_fg, bg = 'NONE' })
  h(0, "TSOperator", { fg = p.alt_fg, bg = 'NONE' })
  h(0, "TSPunctDelimiter", { fg = p.alt_fg, bg = 'NONE' })
  h(0, "TSTagDelimiter", { fg = p.alt_fg, bg = 'NONE' })
  h(0, "TSTagAttribute", { fg = p.orange, bg = 'NONE' })
  h(0, "TSPunctBracket", { fg = p.alt_fg, bg = 'NONE' })
  h(0, "TSPunctSpecial", { fg = p.royal, bg = 'NONE' })
  h(0, "TSString", { fg = p.green, bg = 'NONE' })
  h(0, "TSStringRegex", { fg = p.green, bg = 'NONE' })
  h(0, "TSStringEscape", { fg = p.green, bg = 'NONE' })
  h(0, "TSTag", { fg = p.cyan, bg = 'NONE' })
  h(0, "TSEmphasis", { fg = 'NONE', bg = 'NONE', italic = true, })
  h(0, "TSUnderline", { fg = 'NONE', bg = 'NONE', underline = true, })
  h(0, "TSTitle", { fg = p.fg, bg = 'NONE', })
  h(0, "TSLiteral", { fg = p.royal, bg = 'NONE' })
  h(0, "TSURI", { fg = p.orange, bg = 'NONE', underline = true, })
  h(0, "TSKeywordOperator", { fg = p.royal, bg = 'NONE' })
  h(0, "TSStructure", { fg = p.light_red, bg = 'NONE' })
  h(0, "TSStrong", { fg = p.cyan, bg = 'NONE', bold = true, })
  h(0, "TSQueryLinterError", { fg = p.warning_orange, bg = 'NONE' })
  h(0, "TreesitterContext", { fg = 'NONE', bg = p.dark })

  -- Whichkey
  h(0, "WhichKey", { fg = p.royal, bg = 'NONE' })
  h(0, "WhichKeySeperator", { fg = p.green, bg = 'NONE' })
  h(0, "WhichKeyGroup", { fg = p.cyan, bg = 'NONE' })
  h(0, "WhichKeyDesc", { fg = p.light_red, bg = 'NONE' })
  h(0, "WhichKeyFloat", { fg = 'NONE', bg = p.dark })

  -- Git
  h(0, "SignAdd", { fg = p.sign_add, bg = 'NONE' })
  h(0, "SignChange", { fg = p.sign_change, bg = 'NONE' })
  h(0, "SignDelete", { fg = p.sign_delete, bg = 'NONE' })
  h(0, "GitSignsAdd", { fg = p.sign_add, bg = 'NONE' })
  h(0, "GitSignsChange", { fg = p.sign_change, bg = 'NONE' })
  h(0, "GitSignsDelete", { fg = p.sign_delete, bg = 'NONE' })

  -- LSP
  h(0, "LspDiagnosticsDefaultError", { fg = p.error_red, bg = 'NONE' })
  h(0, "LspDiagnosticsDefaultWarning", { fg = p.warning_orange, bg = 'NONE' })
  h(0, "LspDiagnosticsDefaultInformation", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "LspDiagnosticsDefaultInfo", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "LspDiagnosticsDefaultHint", { fg = p.hint_blue, bg = 'NONE' })
  h(0, "LspDiagnosticsVirtualTextError", { fg = p.error_red, bg = 'NONE' })
  h(0, "LspDiagnosticsVirtualTextWarning", { fg = p.warning_orange, bg = 'NONE' })
  h(0, "LspDiagnosticsVirtualTextInformation", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "LspDiagnosticsVirtualTextInfo", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "LspDiagnosticsVirtualTextHint", { fg = p.hint_blue, bg = 'NONE' })
  h(0, "LspDiagnosticsFloatingError", { fg = p.error_red, bg = 'NONE' })
  h(0, "LspDiagnosticsFloatingWarning", { fg = p.warning_orange, bg = 'NONE' })
  h(0, "LspDiagnosticsFloatingInformation", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "LspDiagnosticsFloatingInfo", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "LspDiagnosticsFloatingHint", { fg = p.hint_blue, bg = 'NONE' })
  h(0, "DiagnosticSignError", { fg = p.error_red, bg = 'NONE' })
  h(0, "DiagnosticSignWarning", { fg = p.warning_orange, bg = 'NONE' })
  h(0, "DiagnosticSignInformation", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "DiagnosticSignInfo", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "DiagnosticSignHint", { fg = p.hint_blue, bg = 'NONE' })
  h(0, "LspDiagnosticsSignError", { fg = p.error_red, bg = 'NONE' })
  h(0, "LspDiagnosticsSignWarning", { fg = p.warning_orange, bg = 'NONE' })
  h(0, "LspDiagnosticsSignInformation", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "LspDiagnosticsSignInfo", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "LspDiagnosticsSignHint", { fg = p.hint_blue, bg = 'NONE' })
  h(0, "LspDiagnosticsError", { fg = p.error_red, bg = 'NONE' })
  h(0, "LspDiagnosticsWarning", { fg = p.warning_orange, bg = 'NONE' })
  h(0, "LspDiagnosticsInformation", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "LspDiagnosticsInfo", { fg = p.info_yellow, bg = 'NONE' })
  h(0, "LspDiagnosticsHint", { fg = p.hint_blue, bg = 'NONE' })
  h(0, "LspDiagnosticsUnderlineError", { fg = 'NONE', bg = 'NONE', underline = true, })
  h(0, "LspDiagnosticsUnderlineWarning", { fg = 'NONE', bg = 'NONE', underline = true, })
  h(0, "LspDiagnosticsUnderlineInformation", { fg = 'NONE', bg = 'NONE', underline = true, })
  h(0, "LspDiagnosticsUnderlineInfo", { fg = 'NONE', bg = 'NONE', underline = true, })
  h(0, "LspDiagnosticsUnderlineHint", { fg = 'NONE', bg = 'NONE', underline = true, })
  h(0, "LspReferenceRead", { fg = 'NONE', bg = '#2e303b' })
  h(0, "LspReferenceText", { fg = 'NONE', bg = '#2e303b' })
  h(0, "LspReferenceWrite", { fg = 'NONE', bg = '#2e303b' })
  h(0, "LspCodeLens", { fg = p.context, bg = 'NONE', italic = true, })
  h(0, "LspCodeLensSeparator", { fg = p.context, bg = 'NONE', italic = true, })

  h(0, "LspInlayHint", { fg = p.lightdark, bg = 'NONE', })

  -- Lualine
  h(0, 'LualineNA', { fg = p.neon, bg = p.dark })
  h(0, "LualineNB", { fg = p.star_yellow, bg = p.dark })
  h(0, "LualineNC", { fg = p.fg, bg = p.dark })
  h(0, 'LualineIA', { fg = p.error_red, bg = p.dark })
  h(0, "LualineIB", { fg = p.red, bg = p.dark })
  h(0, "LualineIC", { fg = p.fg, bg = p.dark })
  h(0, 'LualineVA', { fg = p.royal, bg = p.dark })
  h(0, "LualineVB", { fg = p.star_purple, bg = p.dark })
  h(0, "LualineVC", { fg = p.fg, bg = p.dark })
  h(0, 'LualineRA', { fg = p.darkblue, bg = p.dark })
  h(0, "LualineRB", { fg = p.star_blue, bg = p.dark })
  h(0, "LualineRC", { fg = p.fg, bg = p.dark })
  h(0, 'LualineCA', { fg = p.neongreen, bg = p.dark })
  h(0, "LualineCB", { fg = p.star_green, bg = p.dark })
  h(0, "LualineCC", { fg = p.fg, bg = p.dark })
  h(0, 'LualineEA', { fg = p.solarorange, bg = p.dark })
  h(0, "LualineEB", { fg = p.solarorange, bg = p.dark })
  h(0, "LualineEC", { fg = p.solarorange, bg = p.dark })

  --Oil
  h(0, "OilLink", { fg = p.rose, bg = 'NONE' })
  h(0, "OilLinkTarget", { fg = p.magenta, bg = 'NONE' })

  -- Buffer
  h(0, "BufferCurrent", { fg = p.fg, bg = p.bg })
  h(0, "BufferCurrentIndex", { fg = p.fg, bg = p.bg })
  h(0, "BufferCurrentMod", { fg = p.info_yellow, bg = p.bg })
  h(0, "BufferCurrentSign", { fg = p.hint_blue, bg = p.bg })
  h(0, "BufferCurrentTarget", { fg = p.red, bg = p.bg, bold = true, })
  h(0, "BufferVisible", { fg = p.fg, bg = p.bg })
  h(0, "BufferVisibleIndex", { fg = p.fg, bg = p.bg })
  h(0, "BufferVisibleMod", { fg = p.info_yellow, bg = p.bg })
  h(0, "BufferVisibleSign", { fg = p.white, bg = p.bg })
  h(0, "BufferVisibleTarget", { fg = p.red, bg = p.bg, bold = true, })
  h(0, "BufferInactive", { fg = p.white, bg = p.alt_bg })
  h(0, "BufferInactiveIndex", { fg = p.white, bg = p.alt_bg })
  h(0, "BufferInactiveMod", { fg = p.info_yellow, bg = p.alt_bg })
  h(0, "BufferInactiveSign", { fg = p.white, bg = p.alt_bg })
  h(0, "BufferInactiveTarget", { fg = p.red, bg = p.alt_bg, bold = true, })

  -- StatusLine
  h(0, "StatusLine", { fg = p.line, bg = p.white })
  h(0, "StatusLineNC", { fg = p.line, bg = p.white })
  h(0, "StatusLineSeparator", { fg = p.line, bg = 'NONE' })
  h(0, "StatusLineTerm", { fg = p.line, bg = 'NONE' })
  h(0, "StatusLineTermNC", { fg = p.line, bg = 'NONE' })

  -- IndentBlankline
  h(0, "IndentBlanklineContextChar", { fg = p.context, bg = 'NONE' })
  h(0, "IndentBlanklineContextStart", { fg = 'NONE', bg = 'NONE', underline = true, })
  h(0, "IndentBlanklineChar", { fg = p.dark_gray, bg = 'NONE' })
  h(0, "IndentBlanklineSpaceChar", { fg = p.cyan, bg = 'NONE' })
  h(0, "IndentBlanklineSpaceCharBlankline", { fg = p.info_yellow, bg = 'NONE' })

  -- Cmp
  h(0, "CmpItemAbbrDeprecated", { fg = p.white, bg = 'NONE', strikethrough = true, })
  h(0, "CmpItemAbbrMatch", { fg = p.ui3_blue, bg = 'NONE' })
  h(0, "CmpItemAbbrMatchFuzzy", { fg = p.ui3_blue, bg = 'NONE' })
  h(0, "CmpItemKindFunction", { fg = p.cyan, bg = 'NONE' })
  h(0, "CmpItemKindMethod", { fg = p.cyan, bg = 'NONE' })
  h(0, "CmpItemKindConstructor", { fg = p.cyan, bg = 'NONE' })
  h(0, "CmpItemKindClass", { fg = p.cyan, bg = 'NONE' })
  h(0, "CmpItemKindEnum", { fg = p.cyan, bg = 'NONE' })
  h(0, "CmpItemKindEvent", { fg = p.yellow, bg = 'NONE' })
  h(0, "CmpItemKindInterface", { fg = p.cyan, bg = 'NONE' })
  h(0, "CmpItemKindStruct", { fg = p.cyan, bg = 'NONE' })
  h(0, "CmpItemKindVariable", { fg = p.red, bg = 'NONE' })
  h(0, "CmpItemKindField", { fg = p.red, bg = 'NONE' })
  h(0, "CmpItemKindProperty", { fg = p.red, bg = 'NONE' })
  h(0, "CmpItemKindEnumMember", { fg = p.orange, bg = 'NONE' })
  h(0, "CmpItemKindConstant", { fg = p.orange, bg = 'NONE' })
  h(0, "CmpItemKindKeyword", { fg = p.royal, bg = 'NONE' })
  h(0, "CmpItemKindModule", { fg = p.cyan, bg = 'NONE' })
  h(0, "CmpItemKindValue", { fg = p.fg, bg = 'NONE' })
  h(0, "CmpItemKindUnit", { fg = p.fg, bg = 'NONE' })
  h(0, "CmpItemKindText", { fg = p.fg, bg = 'NONE' })
  h(0, "CmpItemKindSnippet", { fg = p.yellow, bg = 'NONE' })
  h(0, "CmpItemKindFile", { fg = p.fg, bg = 'NONE' })
  h(0, "CmpItemKindFolder", { fg = p.fg, bg = 'NONE' })
  h(0, "CmpItemKindColor", { fg = p.fg, bg = 'NONE' })
  h(0, "CmpItemKindReference", { fg = p.fg, bg = 'NONE' })
  h(0, "CmpItemKindOperator", { fg = p.fg, bg = 'NONE' })
  h(0, "CmpItemKindTypeParameter", { fg = p.red, bg = 'NONE' })
end

return Theme
